//Дан произвольный неориентированный граф. Проверить, будет ли он деревом
#define VERTEXES 20
#include <iostream>
#include <fstream>
using namespace std;

int color[VERTEXES];

void dfs(int vert,int a[VERTEXES][VERTEXES],int n,bool & b)
{
	color[vert] = 1;
	
	for(int i =0;i<n;i++)
	{
		//Обнаружение цикла
		//Условие i>vert справедливо из-за выбранной нумерации и проверки вершин в порядке возрастания
		if ((a[vert][i] == 1  && color[i] == 1 && i>vert)||(a[i][i]==1)) {
			b = true;
		}
		if(a[vert][i]==1&&color[i]==0)
		{
			dfs(i, a, n,b);
		}
	}

}

int main()
{	
	setlocale(LC_ALL, "RU");
	ifstream fin;
	ofstream fout;
	fin.open("Input.txt");
	fout.open("Output.txt");
	//Объявление переменных
	int n; int x = -1; int a[VERTEXES][VERTEXES]; bool tree = false;

	//Обнуление матрицы смежности вершин
	for (int i = 0; i < VERTEXES; i++)
	{
		for (int j = 0; j < VERTEXES; j++)
		{
			a[i][j] = 0;
		}
		
	}

	//Обнуление массива цветов
	for (int i = 0; i < VERTEXES; i++)
		color[i] = 0;


	//cout << "Введите кол-во вершин: ";
	fin >> n;

	//Ввод графа и заполнение матрицы смежности
	for(int i=1;i<=n;i++)
	{
		//cout << "Введите вершины, смежные с вершиной " << i<<" : ";
		fin >> x;
		while(x!=0)
		{
			a[i-1][x-1] = 1;
			a[x - 1][i - 1] = 1;
			fin >> x;
		}
	}
	dfs(0,a, n,tree);
	bool svyaz = true;

	for(int i=0;i<n;i++)
	{
		if (color[i] == 0)svyaz = false;
	}

	fout << endl << "Дерево ли? " << endl;
	if (!tree) {
		if(svyaz)
		fout << "Заданный граф - дерево";
	}
	else fout << "Заданный граф не является деревом";
	fout << endl;
}

